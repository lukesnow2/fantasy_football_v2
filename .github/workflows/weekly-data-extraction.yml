name: Weekly Fantasy Football Data Pipeline

on:
  schedule:
    # Run every Sunday at 6 AM PST during fantasy season (Aug 18 - Jan 18)
    # This captures all weekend games and gives time for Yahoo to finalize stats
    - cron: '0 14 * 8,9,10,11,12,1 0'  # 6 AM PST = 14 UTC, Sundays only
  
  # Allow manual triggering for testing/emergency runs
  workflow_dispatch:
    inputs:
      force_full_extraction:
        description: 'Force full data extraction (includes draft data)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'false'
        - 'true'

jobs:
  check_season_dates:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.date_check.outputs.should_run }}
    steps:
      - name: Check if we're in fantasy season
        id: date_check
        run: |
          current_date=$(date +%Y-%m-%d)
          current_year=$(date +%Y)
          
          # Fantasy season runs Aug 18 - Jan 18
          season_start="${current_year}-08-18"
          season_end="$((current_year + 1))-01-18"
          
          # If we're in January, check against current year
          if [[ $(date +%m) == "01" ]]; then
            season_start="$((current_year - 1))-08-18"
            season_end="${current_year}-01-18"
          fi
          
          echo "Current date: $current_date"
          echo "Season start: $season_start"
          echo "Season end: $season_end"
          
          if [[ "$current_date" >= "$season_start" && "$current_date" <= "$season_end" ]]; then
            echo "✅ We're in fantasy season - pipeline should run"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "⏸️ We're in off-season - skipping pipeline"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  extract_and_deploy:
    runs-on: ubuntu-latest
    needs: check_season_dates
    if: needs.check_season_dates.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Yahoo OAuth credentials
        env:
          YAHOO_CLIENT_ID: ${{ secrets.YAHOO_CLIENT_ID }}
          YAHOO_CLIENT_SECRET: ${{ secrets.YAHOO_CLIENT_SECRET }}
          YAHOO_REFRESH_TOKEN: ${{ secrets.YAHOO_REFRESH_TOKEN }}
        run: |
          # Create config.json from secrets
          cat > config.json << EOF
          {
            "consumer_key": "$YAHOO_CLIENT_ID",
            "consumer_secret": "$YAHOO_CLIENT_SECRET"
          }
          EOF
          
          # Create oauth2.json from refresh token
          cat > oauth2.json << EOF
          {
            "access_token": "",
            "consumer_key": "$YAHOO_CLIENT_ID",
            "consumer_secret": "$YAHOO_CLIENT_SECRET", 
            "refresh_token": "$YAHOO_REFRESH_TOKEN",
            "token_time": 0,
            "token_type": "bearer"
          }
          EOF

      - name: Run weekly data extraction
        id: extraction
        run: |
          timestamp=$(date +%Y%m%d_%H%M%S)
          
          if [[ "${{ github.event.inputs.force_full_extraction }}" == "true" ]]; then
            echo "🔄 Running FULL extraction (including draft data)"
            python3 run_final_complete_extraction.py
            
            # Find the most recent complete file
            latest_file=$(ls -t yahoo_fantasy_FINAL_complete_data_*.json | head -1)
            
            # Extract draft data and merge
            python3 extract_draft_data.py
            
            # Find the most recent file with drafts
            latest_draft_file=$(ls -t yahoo_fantasy_COMPLETE_with_drafts_*.json | head -1)
            echo "data_file=$latest_draft_file" >> $GITHUB_OUTPUT
          else
            echo "⚡ Running WEEKLY extraction (teams, rosters, matchups, transactions)"
            python3 weekly_data_extraction.py
            
            # Find the most recent weekly extraction file
            latest_file=$(ls -t yahoo_fantasy_weekly_data_*.json | head -1)
            echo "data_file=$latest_file" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Heroku Postgres
        env:
          DATABASE_URL: ${{ secrets.HEROKU_DATABASE_URL }}
        run: |
          echo "🚀 Deploying data to Heroku Postgres"
          python3 deploy_to_heroku_postgres.py --data-file "${{ steps.extraction.outputs.data_file }}" --database-url "$DATABASE_URL"

      - name: Archive extraction file
        uses: actions/upload-artifact@v3
        with:
          name: weekly-extraction-${{ github.run_number }}
          path: ${{ steps.extraction.outputs.data_file }}
          retention-days: 30

      - name: Send success notification
        if: success()
        run: |
          echo "✅ Weekly fantasy football data pipeline completed successfully!"
          echo "📊 Data file: ${{ steps.extraction.outputs.data_file }}"
          echo "🗄️ Deployed to Heroku Postgres"

      - name: Send failure notification
        if: failure()
        run: |
          echo "❌ Weekly fantasy football data pipeline failed!"
          echo "🔍 Check the logs for details"
          exit 1 